require('dotenv').config();
const express = require('express');
const helmet = require('helmet');
const cors = require('cors');
const rateLimit = require('express-rate-limit');
const { Sequelize } = require('sequelize');
const path = require('path');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Express
const app = express();
const PORT = process.env.APP_PORT || 3000;

// ======================================
// –ë–∞–∑–æ–≤—ã–µ middleware
// ======================================
app.use(helmet()); // –ó–∞—â–∏—Ç–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
app.use(cors({
  origin: process.env.APP_URL,
  credentials: true
}));
app.use(express.json({ limit: '10kb' }));
app.use(express.urlencoded({ extended: true }));

// –õ–∏–º–∏—Ç–µ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
  max: process.env.RATE_LIMIT || 100,
  message: { error: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤' }
});
app.use('/api/', limiter);

// ======================================
// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
// ======================================
const sequelize = new Sequelize({
  dialect: process.env.DB_CONNECTION,
  storage: process.env.SQLITE_PATH, // –¢–æ–ª—å–∫–æ –¥–ª—è SQLite
  host: process.env.DB_HOST,
  port: process.env.DB_PORT,
  database: process.env.DB_DATABASE,
  username: process.env.DB_USERNAME,
  password: process.env.DB_PASSWORD,
  logging: process.env.APP_DEBUG ? console.log : false,
  define: {
    timestamps: true,
    paranoid: true // –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
(async () => {
  try {
    await sequelize.authenticate();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ');
    await sequelize.sync({ alter: process.env.APP_DEBUG }); // –ê–≤—Ç–æ-–º–∏–≥—Ä–∞—Ü–∏–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', error);
  }
})();

// ======================================
// –†–æ—É—Ç—ã API
// ======================================
const apiRouter = express.Router();

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤
apiRouter.use('/auth', require('./routes/authRoutes'));
apiRouter.use('/products', require('./routes/productRoutes'));
apiRouter.use('/orders', require('./routes/orderRoutes'));
apiRouter.use('/admin', require('./routes/adminRoutes'));

app.use('/api', apiRouter);

// ======================================
// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥)
// ======================================
app.use(express.static(path.join(__dirname, 'public')));

// Fallback –¥–ª—è SPA
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// ======================================
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
// ======================================
app.use((err, req, res, next) => {
  console.error('üõë –û—à–∏–±–∫–∞:', err.stack);
  
  const status = err.status || 500;
  const message = process.env.APP_DEBUG 
    ? err.message 
    : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';

  res.status(status).json({ 
    error: message,
    ...(process.env.APP_DEBUG && { stack: err.stack })
  });
});

// ======================================
// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
// ======================================
app.listen(PORT, () => {
  console.log(`
  üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ ${process.env.APP_URL}
  ‚öôÔ∏è  –†–µ–∂–∏–º: ${process.env.APP_ENV}
  üìÖ ${new Date().toLocaleString()}
  `);
});

process.on('unhandledRejection', (err) => {
  console.error('‚ö†Ô∏è –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', err);
});